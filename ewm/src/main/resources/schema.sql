DROP TABLE IF EXISTS event_compilation CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS app_users CASCADE;
DROP TABLE IF EXISTS locations CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS participation_requests CASCADE;
DROP TABLE IF EXISTS event_category CASCADE;
DROP TABLE IF EXISTS compilations CASCADE;


CREATE TABLE IF NOT EXISTS app_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email VARCHAR(254) NOT NULL,
  name VARCHAR(250) NOT NULL,
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS locations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  lat DECIMAL NOT NULL,
  lon DECIMAL NOT NULL,
  name VARCHAR(100),
  description VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  CONSTRAINT UQ_CATEGORY_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  annotation VARCHAR(2000) NOT NULL,
  title VARCHAR(120) NOT NULL,
  description VARCHAR(7000) NOT NULL,
  event_date TIMESTAMP NOT NULL,
  location_id BIGINT REFERENCES locations (id) NOT NULL,
  paid BOOLEAN NOT NULL,
  participant_limit INTEGER,
  request_moderation BOOLEAN NOT NULL,
  created TIMESTAMP NOT NULL,
  published TIMESTAMP,
  state VARCHAR(10) NOT NULL,
  category_id BIGINT REFERENCES categories (id) NOT NULL,
  initiator_id BIGINT REFERENCES app_users (id) ON DELETE CASCADE NOT NULL
);

CREATE TABLE IF NOT EXISTS participation_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created TIMESTAMP NOT NULL,
  event_id BIGINT REFERENCES events (id) ON DELETE CASCADE NOT NULL,
  requester_id BIGINT REFERENCES app_users (id) ON DELETE CASCADE NOT NULL,
  state VARCHAR(10) NOT NULL,
  CONSTRAINT UQ_REQUEST_REQUESTER_EVENT UNIQUE (event_id, requester_id)
);

CREATE TABLE IF NOT EXISTS compilations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title  VARCHAR(50) NOT NULL,
  pinned BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS event_compilation (
  event_id BIGINT REFERENCES events (id) ON DELETE CASCADE NOT NULL,
  compilation_id BIGINT REFERENCES compilations (id) ON DELETE CASCADE NOT NULL,
  PRIMARY KEY (event_id, compilation_id)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;